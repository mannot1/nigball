-- Constants
local GRAVITY = -30
local DEVIATION_TOLERANCE = 2
local END_POSITION_TOLERANCE = 3
local NUM_TRAJECTORY_PARTS = 25
local UPDATE_INTERVAL = 0.1 -- Frequency for updating trajectory (seconds)

-- Pre-create trajectory parts and lines
local trajectoryParts = {}
local trajectoryLines = {}
for i = 1, NUM_TRAJECTORY_PARTS do
    local part = Instance.new("Part")
    part.Name = "TrajectoryPart"
    part.Size = Vector3.new(0.2, 0.2, 0.2)
    part.Anchored = true
    part.CanCollide = false
    part.BrickColor = BrickColor.new("Bright red")
    part.Transparency = 1 -- Initially invisible
    part.Parent = workspace
    table.insert(trajectoryParts, part)

    if i < NUM_TRAJECTORY_PARTS then
        local line = Instance.new("Part")
        line.Name = "TrajectoryLine"
        line.Size = Vector3.new(0.1, 0.1, 1)
        line.Anchored = true
        line.CanCollide = false
        line.BrickColor = BrickColor.new("Lime green")
        line.Material = Enum.Material.Neon
        line.Transparency = 1 -- Initially invisible
        line.Parent = workspace
        table.insert(trajectoryLines, line)
    end
end

-- Function to calculate and visualize the trajectory
local function visualizeTrajectory(ball)
    local velocity = ball:FindFirstChild("Velocity")
    local ballPart = ball:FindFirstChild("BallPart")
    if not velocity or not velocity:IsA("Vector3Value") or not ballPart then
        return
    end

    local initialPosition = ballPart.Position
    local initialVelocity = velocity.Value
    local yFloor = 0

    -- Calculate time to hit the floor
    local a = 0.5 * GRAVITY
    local b = initialVelocity.Y
    local c = initialPosition.Y - yFloor
    local discriminant = b^2 - 4 * a * c
    if discriminant < 0 then return end
    local tHit = (-b - math.sqrt(discriminant)) / (2 * a)
    if tHit < 0 then return end

    -- Calculate trajectory points
    local trajectoryPoints = {}
    local timeStep = tHit / NUM_TRAJECTORY_PARTS
    for t = 0, tHit, timeStep do
        local x = initialPosition.X + initialVelocity.X * t
        local y = initialPosition.Y + initialVelocity.Y * t + 0.5 * GRAVITY * t^2
        local z = initialPosition.Z + initialVelocity.Z * t
        table.insert(trajectoryPoints, Vector3.new(x, y, z))
    end

    -- Visualize trajectory
    for i, point in ipairs(trajectoryPoints) do
        if trajectoryParts[i] then
            local part = trajectoryParts[i]
            part.Position = point
            part.Transparency = 0 -- Make visible
        end
        if trajectoryLines[i] and trajectoryPoints[i + 1] then
            local line = trajectoryLines[i]
            local nextPoint = trajectoryPoints[i + 1]
            line.Size = Vector3.new(0.1, 0.1, (nextPoint - point).Magnitude)
            line.Position = (point + nextPoint) / 2
            line.CFrame = CFrame.new(point, nextPoint)
            line.Transparency = 0 -- Make visible
        end
    end

    -- Hide unused parts and lines
    for i = #trajectoryPoints + 1, NUM_TRAJECTORY_PARTS do
        if trajectoryParts[i] then trajectoryParts[i].Transparency = 1 end
        if trajectoryLines[i] then trajectoryLines[i].Transparency = 1 end
    end
end

-- Update trajectory periodically
workspace.ChildAdded:Connect(function(child)
    if child.Name == "Ball" then
        local spawner = child:WaitForChild("Spawner", 5)
        if spawner and spawner:IsA("StringValue") then
            local playerName = spawner.Value
            local player = game.Players:FindFirstChild(playerName)
            if player and player.Team and player.Team.Name ~= "Player" then
                task.spawn(function()
                    while child.Parent do
                        visualizeTrajectory(child)
                        task.wait(UPDATE_INTERVAL)
                    end
                end)
            end
        end
    end
end)
